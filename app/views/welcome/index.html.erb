<div class="grid-container">
  <div class="grid-item">
    <textarea id="editor">
      while true do
      puts hello
      end
    </textarea>

  </div>
  <div class="grid-item">
    <div id="ast-editor-wrap">
    <textarea id="ast-editor">
    </textarea>
    </div>
  </div>
  <div class="grid-item">
    <textarea id="transform-editor">
class Transform < Parser::TreeRewriter
          def on_while(node)
            # Check if the statement starts with "do"
            if node.location.begin.is?('do')
            remove(node.location.begin)
            end
            end
            end
    </textarea>
  </div>
  <div class="grid-item">
    <textarea id="output-editor">
      if foo then
      bar
      end
    </textarea>
  </div>
</div>
<script>

  const editorOptions = {
    mode: "text/x-ruby",
    matchBrackets: true,
    indentUnit: 2,
    lineNumbers: true,
    theme: 'solarized'
  };

  var editor = CodeMirror.fromTextArea(document.getElementById("editor"),editorOptions );
  var transformEditor = CodeMirror.fromTextArea(document.getElementById("transform-editor"), editorOptions);
  var outputEditor = CodeMirror.fromTextArea(document.getElementById("output-editor"), editorOptions);
  var astEditor = CodeMirror.fromTextArea(document.getElementById("ast-editor"), { ...editorOptions, readOnly: true });

  
  
  updateAst(editor.getValue(), transformEditor.getValue());

  indentAll();

  function indentAll() {
  indentCode(editor);
  indentCode(transformEditor);
  indentCode(outputEditor);
  }


  // https://davidwalsh.name/javascript-debounce-function
  function debounce(func, wait, immediate) {
      var timeout;
      return function() {
            var context = this, args = arguments;
            var later = function() {
                    timeout = null;
                    if (!immediate) func.apply(context, args);
                  };
            var callNow = immediate && !timeout;
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
            if (callNow) func.apply(context, args);
          };
  };

  function updateAst(code, transform) {
    $.ajax({
      url: "/ast",
      type: "post",
      data: { code: code, transform: transform},
      success: function(data) {
        astEditor.setValue(data.ast);
        outputEditor.setValue(data.output);
      },
      error: function(data) {}
    });


  }

  function indentCode(ed) {
    ed.setSelection({
      'line':ed.firstLine(),
      'ch':0,
      'sticky':null
    },{
      'line':ed.lastLine(),
      'ch':0,
      'sticky':null
    },
      {scroll: false});
    //auto indent the selection
    ed.indentSelection("smart");
    ed.setCursor({line: ed.firstLine(), ch: 0 });
  }


  editor.on("change",debounce(function(cm, change) {
    let code = cm.getValue();
    let transform = transformEditor.getValue();
    updateAst(code, transform);
  }, 250));



  transformEditor.on("change",debounce(function(cm, change) {
    console.log('transform change');
    let transform = cm.getValue();
    let code = editor.getValue();
    updateAst(code, transform);
  }, 250));

  $('#create-gist').click(function() {
$.ajax({
      url: "/ast/gist",
      type: "post",
      data: { code: editor.getValue(), transform: transformEditor.getValue()},
      success: function(data) {
        console.log(data);
      },
  error: function(data) {
    console.log('Gist creation failed');
  }
    });


  });


</script>
